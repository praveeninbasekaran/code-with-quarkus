CREATE OR REPLACE FUNCTION email_template_library_audit_trigger_fn()
RETURNS TRIGGER AS $$
DECLARE
    col_name TEXT;
    old_val TEXT;
    new_val TEXT;
BEGIN
    -- Prevent recursion: If the trigger fires on the audit table, exit
    IF TG_RELNAME = 'email_template_library_audit' THEN
        RETURN NULL;
    END IF;

    -- INSERT: Log all new column values (old_value = NULL)
    IF TG_OP = 'INSERT' THEN
        FOR col_name IN 
            SELECT c.column_name 
            FROM information_schema.columns c
            WHERE c.table_name = 'email_template'
            AND c.column_name NOT IN ('created_at', 'updated_at') -- Exclude timestamps if not needed
        LOOP
            EXECUTE format(
                'INSERT INTO drm_sit.email_template_library_audit (id, field_changed, old_value, new_value, action, actionby, actiondate) 
                VALUES ($1, $2, NULL, $3, ''INSERT'', $4, NOW())'
            ) 
            USING NEW.id, col_name, NEW.*::hstore -> col_name, NEW.created_by;
        END LOOP;

    -- UPDATE: Log only changed fields
    ELSIF TG_OP = 'UPDATE' THEN
        FOR col_name IN 
            SELECT c.column_name 
            FROM information_schema.columns c
            WHERE c.table_name = 'email_template'
            AND c.column_name NOT IN ('created_at', 'updated_at')
        LOOP
            old_val := OLD.*::hstore -> col_name;
            new_val := NEW.*::hstore -> col_name;

            -- Only log changes where the value is different
            IF old_val IS DISTINCT FROM new_val THEN
                EXECUTE format(
                    'INSERT INTO drm_sit.email_template_library_audit (id, field_changed, old_value, new_value, action, actionby, actiondate) 
                    VALUES ($1, $2, $3, $4, ''UPDATE'', $5, NOW())'
                ) 
                USING NEW.id, col_name, old_val, new_val, NEW.updated_by;
            END IF;
        END LOOP;

    -- DELETE: Log all old column values (new_value = NULL)
    ELSIF TG_OP = 'DELETE' THEN
        FOR col_name IN 
            SELECT c.column_name 
            FROM information_schema.columns c
            WHERE c.table_name = 'email_template'
            AND c.column_name NOT IN ('created_at', 'updated_at')
        LOOP
            EXECUTE format(
                'INSERT INTO drm_sit.email_template_library_audit (id, field_changed, old_value, new_value, action, actionby, actiondate) 
                VALUES ($1, $2, $3, NULL, ''DELETE'', $4, NOW())'
            ) 
            USING OLD.id, col_name, OLD.*::hstore -> col_name, OLD.updated_by;
        END LOOP;
    END IF;

    RETURN NULL;

EXCEPTION 
    WHEN OTHERS THEN 
        RAISE WARNING 'Error in email_template_library_audit_trigger_fn: %', SQLERRM;
        RETURN NULL;
END;
$$ LANGUAGE plpgsql;